{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to UCLCSSA API \u00b6 Welcome to UCLCSSA API's documentation. UCLCSSA API is built using: Node.js + Express.js UCL API WeChat Open Platform + WeChat MiniProgram Version The UCLCSSA API documented here is version 1.0.0 . Source Code Source code for UCLCSSA API available at UCLCSSA/API-Server . Endpoint Documentation \u00b6 A typical endpoint is documentated in the following format: HTTP_METHOD /endpoint/address?query_parameter={} Info regarding this endpoint. The HTTP_METHOD is one of GET , POST , PUT or DELETE , e.g. GET /posts . For query parameters, they are documented in the Query Parameter(s) section. If the method is POST , the requirements of the post body will be documented in Request Body section. If the endpoint requires authorization, it shall be specified as well (the tier of authorization required is either wechat-registered , uclapi-registered or none ). If the only required header is the Authorization header, it will be specified in the Authorization section explicitly and will not be placed in a separate Request Header(s) section. Authorization wechat-registered Query Parameter(s) : Parameter Type Description Constraints Default Required query_parameter int Some non-negative int. > 0 && <= 100 1 Yes Request Body : { keyA : string , nestedGroup : { xxx : int , yyy : int [] } } Key Type Description Constraints Default Required keyA string Hello World. Not empty. '' No nestedGroup.xxx int Hello World. >= 0 0 No nestedGroup.yyy int[] Numbers. Length >= 0 [] Yes Successful response Info on successful response. The HTTP status code, as well as any response header and body shall be documented. Status Code : 200 OK Response Header(s) : Content-Type: application/vnd.uclcssa.v1+json Response Body : { \"message\" : \"cheers\" } Failure response 1 Info on failure response. HTTP status code and response header(s) and body shall be documented as well. Status Code : 403 Forbidden Response Header(s) : Content-Type: application/vnd.uclcssa.v1+json Response Body : { \"message\" : \"Thou shall not pass.\" } Failure response 2 Omitted.","title":"Home"},{"location":"#welcome-to-uclcssa-api","text":"Welcome to UCLCSSA API's documentation. UCLCSSA API is built using: Node.js + Express.js UCL API WeChat Open Platform + WeChat MiniProgram Version The UCLCSSA API documented here is version 1.0.0 . Source Code Source code for UCLCSSA API available at UCLCSSA/API-Server .","title":"Welcome to UCLCSSA API"},{"location":"#endpoint-documentation","text":"A typical endpoint is documentated in the following format: HTTP_METHOD /endpoint/address?query_parameter={} Info regarding this endpoint. The HTTP_METHOD is one of GET , POST , PUT or DELETE , e.g. GET /posts . For query parameters, they are documented in the Query Parameter(s) section. If the method is POST , the requirements of the post body will be documented in Request Body section. If the endpoint requires authorization, it shall be specified as well (the tier of authorization required is either wechat-registered , uclapi-registered or none ). If the only required header is the Authorization header, it will be specified in the Authorization section explicitly and will not be placed in a separate Request Header(s) section. Authorization wechat-registered Query Parameter(s) : Parameter Type Description Constraints Default Required query_parameter int Some non-negative int. > 0 && <= 100 1 Yes Request Body : { keyA : string , nestedGroup : { xxx : int , yyy : int [] } } Key Type Description Constraints Default Required keyA string Hello World. Not empty. '' No nestedGroup.xxx int Hello World. >= 0 0 No nestedGroup.yyy int[] Numbers. Length >= 0 [] Yes Successful response Info on successful response. The HTTP status code, as well as any response header and body shall be documented. Status Code : 200 OK Response Header(s) : Content-Type: application/vnd.uclcssa.v1+json Response Body : { \"message\" : \"cheers\" } Failure response 1 Info on failure response. HTTP status code and response header(s) and body shall be documented as well. Status Code : 403 Forbidden Response Header(s) : Content-Type: application/vnd.uclcssa.v1+json Response Body : { \"message\" : \"Thou shall not pass.\" } Failure response 2 Omitted.","title":"Endpoint Documentation"},{"location":"authentication-and-authorization/","text":"Authentication and Authorization \u00b6 Basics \u00b6 Most API endpoints are protected . Users are required to register in order to gain access to protected API endpoints. Upon registration, the client side receives a uclcssaSessionKey which is used as the authorization bearer token. Any requests made to protected API endpoints must include the Authorization header and the uclcssaSessionKey as the token. The uclcssaSessionKey serves to authenticate the user's identity, and is associated with WeChat and UCLAPI registration information to be authorized to use protected endpoints. Authorization Header \u00b6 The uclcssaSessionKey shall be passed in as a string, as the value of the Authorization header. Example Logging out via /logout requires the Authorization header. POST /logout HTTP / 1.1 Accept : application/vnd.uclcssa.v1+json Authorization : 936A185CAAA266BB9CBE981E9E05CB78CD732B0B3280EB944412BB6F8F8F07AF Registration \u00b6 UCLCSSA API utilizes a two-tiered registration system. Registration Tiers TIER 1 : wechat-registered The user needs to register via /register/wechat to gain wechat-registered status. Any WeChat-related functionality requires the user to have at minimum this registration tier. TIER 2 : uclapi-registered The user needs to register via /register/uclapi to gain uclapi-registered status. Any UCL-related functionality requires the user to have this registration tier. Warning Each uclcssaSessionKey has an associated default validity period of 30 days . If the user uses the uclcssaSessionKey often within the validity period, the key's validity period is automatically extended . That is, using the key extends its validity period. If a uclcssaSessionKey is expired, it will be invalidated and the user must re-register with the API. The user's information (posts, profile information, etc.) will still be retained unless he/she requests to delete his/her associated information explicitly. WeChat Registration \u00b6 Tier 1 registration. Users who complete the WeChat registration process will be able to perform basic functionalities (such as forum interactions and posting) as well as WeChat-specific functionalities. WeChat MiniProgram Login See MiniProgram Login . The WeChat client shall invoke wx . login () to obtain a temporary code , which shall be passed along to UCLCSSA API. POST /register/wechat Authorization none Request Body : { appId : string , appSecret : string , code : string } Key Type Description Constraints Default Required appId string Obtained from WeChat client. N/A N/A Yes appSecret string Obtained from WeChat client. N/A N/A Yes code string Obtained from WeChat client. N/A N/A Yes Success Successful registration. Status Code : 200 OK Response Body : { \"uclcssaSessionKey\" : \"UCLCSSASESSIONKEY\" } Key Type Description uclcssaSessionKey string Key representing a user session. Missing required key(s) Status Code : 400 Bad Request Response Body : { \"error\" : \"@bad-request/missing-required-keys\" } UCLAPI Registration \u00b6 Tier 2 registration. Users who upgrade to the uclapi-registered tier must already have the wechat-registered tier, that is, already registered through WeChat. The user may begin registering for UCLAPI by calling /register/uclapi . Note that a valid uclcssaSessionKey is required. POST /register/uclapi Authorization wechat-registered Request body : { email : string } Key Type Description Constraints Default Required email string Email to send confirmation to. Valid email address. N/A Yes Success Successful request. A confirmation email will be sent to the specified address. Status Code : 200 OK Missing required email Status Code : 400 Bad Request Response Body : { \"error\" : \"@bad-request/missing-required-keys\" } Invalid email address Status Code : 400 Bad Request Response Body : { \"error\" : \"@bad-request/invalid-email\" } Missing Authorization header Missing Authorization header. Status Code : 400 Bad Request Response Body : { \"error\" : \"@bad-request/missing-authorization-header\" } The email does not necessarily have to be an UCL email, since the user will have to login through their UCL credentials anyway. Also note that uclcssaSessionKey here is only valid if the user has previously registered through the WeChat registration process. The API will send a registration email to the user, containing a link to the GET /authorize/uclapi endpoint. Each uclapiRegistrationCode is issued to track UCLAPI registration process, with each uclapiRegistrationCode being valid for 30 minutes . GET /authorize/uclapi?uclapiRegistrationCode=... Authorization none Query Parameters(s) : Parameter Type Description Required uclapiRegistrationCode string A registration code issued by the API to track registration process. Yes Cache control To protect users, any requests made to this endpoint must not be cached by the client. The API will return a set of headers requiring the client to invalidate any caches of this GET request, which the client shall respect: HTTP / 1.1 301 Redirect Cache-Control : no-cache, no-store, must-revalidate Pragma : no-cache Expires : 0 Redirect to UCLAPI Redirects the user to UCLAPI's https://uclapi.com/oauth/authorize endpoint, with query parameters: client_id as provided by API state being the user's WeChat openId for tracking. Status Code : 301 Redirect Response Header(s) : Location: https://uclapi.com/oauth/authorize?client_id=...&state=... Missing uclapiRegistrationCode Status Code : 400 Bad Request Response Body : { \"error\" : \"@bad-request/missing-required-query-parameters\" } Invalid uclapiRegistrationCode The user's uclapiRegistrationCode may be expired or invalid. Status Code : 403 Forbidden Response Body : { \"error\" : \"@forbidden/invalid-uclapi-registration-code\" } If the user agrees to authorize UCLCSSA API to retrieve his/her information on his/her behalf by loggin in through the user's UCL credentials, UCLAPI will call the provided callback URL at GET /authorize/uclapi/callback . GET /authorize/uclapi/callback?client_id=...&state=...&result=...&code=... This endpoint only serves to interface with UCLAPI. Clients may not use this endpoint. UCLAPI is whitelisted as origin. See UCLAPI OAuth#meta . Authorization none Query Parameters : Parameter Type Description Required client_id string UCLCSSA API client_id . Yes state string User's WeChat openId . Yes client_secret string UCLCSSA API client_secret Yes* code string Voucher to obtain uclapiToken . Yes* * If user denies authorization, client_secret and code will be missing. However, since this endpoint interfaces with UCLAPI, it returns 200 OK to recognize that the callback endpoint is in fact successfully invoked. Callback URL invoked Status Code : 200 OK Logging Out \u00b6 A user may choose to terminate his/her session. This can be achieved by invalidating his/her session. After logging out, the user's associated WeChat sessionKey and UCL API token are both nullified. POST /logout Authorization wechat-registered OR uclapi-registered Success Status Code : 200 OK Missing Authorization header Missing Authorization header. Status Code : 400 Bad Request Response Body : { \"error\" : \"@bad-request/missing-authorization-header\" } Invalid uclcssaSessionKey The provided uclcssaSessionKey does not exist in records. It may be invalid or expired. Status Code : 403 Forbidden Response Body : { \"error\" : \"@forbidden/invalid-uclcssa-session-key\" } Example POST /logout HTTP / 1.1 Accept : application/vnd.uclcssa.v1+json Authorization : 936A185CAAA266BB9CBE981E9E05CB78CD732B0B3280EB944412BB6F8F8F07AF The Authorization header and a valid uclcssaSessionKey is required so the API can find a matching user session.","title":"Authentication and Authorization"},{"location":"authentication-and-authorization/#authentication-and-authorization","text":"","title":"Authentication and Authorization"},{"location":"authentication-and-authorization/#basics","text":"Most API endpoints are protected . Users are required to register in order to gain access to protected API endpoints. Upon registration, the client side receives a uclcssaSessionKey which is used as the authorization bearer token. Any requests made to protected API endpoints must include the Authorization header and the uclcssaSessionKey as the token. The uclcssaSessionKey serves to authenticate the user's identity, and is associated with WeChat and UCLAPI registration information to be authorized to use protected endpoints.","title":"Basics"},{"location":"authentication-and-authorization/#authorization-header","text":"The uclcssaSessionKey shall be passed in as a string, as the value of the Authorization header. Example Logging out via /logout requires the Authorization header. POST /logout HTTP / 1.1 Accept : application/vnd.uclcssa.v1+json Authorization : 936A185CAAA266BB9CBE981E9E05CB78CD732B0B3280EB944412BB6F8F8F07AF","title":"Authorization Header"},{"location":"authentication-and-authorization/#registration","text":"UCLCSSA API utilizes a two-tiered registration system. Registration Tiers TIER 1 : wechat-registered The user needs to register via /register/wechat to gain wechat-registered status. Any WeChat-related functionality requires the user to have at minimum this registration tier. TIER 2 : uclapi-registered The user needs to register via /register/uclapi to gain uclapi-registered status. Any UCL-related functionality requires the user to have this registration tier. Warning Each uclcssaSessionKey has an associated default validity period of 30 days . If the user uses the uclcssaSessionKey often within the validity period, the key's validity period is automatically extended . That is, using the key extends its validity period. If a uclcssaSessionKey is expired, it will be invalidated and the user must re-register with the API. The user's information (posts, profile information, etc.) will still be retained unless he/she requests to delete his/her associated information explicitly.","title":"Registration"},{"location":"authentication-and-authorization/#wechat-registration","text":"Tier 1 registration. Users who complete the WeChat registration process will be able to perform basic functionalities (such as forum interactions and posting) as well as WeChat-specific functionalities. WeChat MiniProgram Login See MiniProgram Login . The WeChat client shall invoke wx . login () to obtain a temporary code , which shall be passed along to UCLCSSA API. POST /register/wechat Authorization none Request Body : { appId : string , appSecret : string , code : string } Key Type Description Constraints Default Required appId string Obtained from WeChat client. N/A N/A Yes appSecret string Obtained from WeChat client. N/A N/A Yes code string Obtained from WeChat client. N/A N/A Yes Success Successful registration. Status Code : 200 OK Response Body : { \"uclcssaSessionKey\" : \"UCLCSSASESSIONKEY\" } Key Type Description uclcssaSessionKey string Key representing a user session. Missing required key(s) Status Code : 400 Bad Request Response Body : { \"error\" : \"@bad-request/missing-required-keys\" }","title":"WeChat Registration"},{"location":"authentication-and-authorization/#uclapi-registration","text":"Tier 2 registration. Users who upgrade to the uclapi-registered tier must already have the wechat-registered tier, that is, already registered through WeChat. The user may begin registering for UCLAPI by calling /register/uclapi . Note that a valid uclcssaSessionKey is required. POST /register/uclapi Authorization wechat-registered Request body : { email : string } Key Type Description Constraints Default Required email string Email to send confirmation to. Valid email address. N/A Yes Success Successful request. A confirmation email will be sent to the specified address. Status Code : 200 OK Missing required email Status Code : 400 Bad Request Response Body : { \"error\" : \"@bad-request/missing-required-keys\" } Invalid email address Status Code : 400 Bad Request Response Body : { \"error\" : \"@bad-request/invalid-email\" } Missing Authorization header Missing Authorization header. Status Code : 400 Bad Request Response Body : { \"error\" : \"@bad-request/missing-authorization-header\" } The email does not necessarily have to be an UCL email, since the user will have to login through their UCL credentials anyway. Also note that uclcssaSessionKey here is only valid if the user has previously registered through the WeChat registration process. The API will send a registration email to the user, containing a link to the GET /authorize/uclapi endpoint. Each uclapiRegistrationCode is issued to track UCLAPI registration process, with each uclapiRegistrationCode being valid for 30 minutes . GET /authorize/uclapi?uclapiRegistrationCode=... Authorization none Query Parameters(s) : Parameter Type Description Required uclapiRegistrationCode string A registration code issued by the API to track registration process. Yes Cache control To protect users, any requests made to this endpoint must not be cached by the client. The API will return a set of headers requiring the client to invalidate any caches of this GET request, which the client shall respect: HTTP / 1.1 301 Redirect Cache-Control : no-cache, no-store, must-revalidate Pragma : no-cache Expires : 0 Redirect to UCLAPI Redirects the user to UCLAPI's https://uclapi.com/oauth/authorize endpoint, with query parameters: client_id as provided by API state being the user's WeChat openId for tracking. Status Code : 301 Redirect Response Header(s) : Location: https://uclapi.com/oauth/authorize?client_id=...&state=... Missing uclapiRegistrationCode Status Code : 400 Bad Request Response Body : { \"error\" : \"@bad-request/missing-required-query-parameters\" } Invalid uclapiRegistrationCode The user's uclapiRegistrationCode may be expired or invalid. Status Code : 403 Forbidden Response Body : { \"error\" : \"@forbidden/invalid-uclapi-registration-code\" } If the user agrees to authorize UCLCSSA API to retrieve his/her information on his/her behalf by loggin in through the user's UCL credentials, UCLAPI will call the provided callback URL at GET /authorize/uclapi/callback . GET /authorize/uclapi/callback?client_id=...&state=...&result=...&code=... This endpoint only serves to interface with UCLAPI. Clients may not use this endpoint. UCLAPI is whitelisted as origin. See UCLAPI OAuth#meta . Authorization none Query Parameters : Parameter Type Description Required client_id string UCLCSSA API client_id . Yes state string User's WeChat openId . Yes client_secret string UCLCSSA API client_secret Yes* code string Voucher to obtain uclapiToken . Yes* * If user denies authorization, client_secret and code will be missing. However, since this endpoint interfaces with UCLAPI, it returns 200 OK to recognize that the callback endpoint is in fact successfully invoked. Callback URL invoked Status Code : 200 OK","title":"UCLAPI Registration"},{"location":"authentication-and-authorization/#logging-out","text":"A user may choose to terminate his/her session. This can be achieved by invalidating his/her session. After logging out, the user's associated WeChat sessionKey and UCL API token are both nullified. POST /logout Authorization wechat-registered OR uclapi-registered Success Status Code : 200 OK Missing Authorization header Missing Authorization header. Status Code : 400 Bad Request Response Body : { \"error\" : \"@bad-request/missing-authorization-header\" } Invalid uclcssaSessionKey The provided uclcssaSessionKey does not exist in records. It may be invalid or expired. Status Code : 403 Forbidden Response Body : { \"error\" : \"@forbidden/invalid-uclcssa-session-key\" } Example POST /logout HTTP / 1.1 Accept : application/vnd.uclcssa.v1+json Authorization : 936A185CAAA266BB9CBE981E9E05CB78CD732B0B3280EB944412BB6F8F8F07AF The Authorization header and a valid uclcssaSessionKey is required so the API can find a matching user session.","title":"Logging Out"},{"location":"error-reporting/","text":"Error Reporting \u00b6 To make using UCLCSSA API as pleasent as possible, all API endpoints strive to have a uniform error reporting format. Firstly, HTTP status codes are used semantically to convey success or failure. Any 2XX codes shall indicate successful request. Any 4XX codes shall indicate failure. Any 5XX codes shall indicate unexpected errors. For 4XX errors, such as 400 Bad Request , 403 Forbidden , any endpoints returning those status codes shall return a JSON response containing a detailed error . An error is a short string of the format @http-status/detailed-error-type . For example, missing the Authorization header in a request made to a protected endpoint will give an error of @bad-request/missing-authorization-header . The client may choose to check error for detailed error causes, as 400 Bad Request may happen due to different reasons, and 403 Forbidden may happen because uclcssaSessionKey is either expired or invalid. Typical Error Response HTTP / 1.1 403 Forbidden Content-Type : application/vnd.uclcssa.v1+json { \"error\" : \"@forbidden/invalid-uclcssa-session-key\" }","title":"Error Reporting"},{"location":"error-reporting/#error-reporting","text":"To make using UCLCSSA API as pleasent as possible, all API endpoints strive to have a uniform error reporting format. Firstly, HTTP status codes are used semantically to convey success or failure. Any 2XX codes shall indicate successful request. Any 4XX codes shall indicate failure. Any 5XX codes shall indicate unexpected errors. For 4XX errors, such as 400 Bad Request , 403 Forbidden , any endpoints returning those status codes shall return a JSON response containing a detailed error . An error is a short string of the format @http-status/detailed-error-type . For example, missing the Authorization header in a request made to a protected endpoint will give an error of @bad-request/missing-authorization-header . The client may choose to check error for detailed error causes, as 400 Bad Request may happen due to different reasons, and 403 Forbidden may happen because uclcssaSessionKey is either expired or invalid. Typical Error Response HTTP / 1.1 403 Forbidden Content-Type : application/vnd.uclcssa.v1+json { \"error\" : \"@forbidden/invalid-uclcssa-session-key\" }","title":"Error Reporting"},{"location":"versioning/","text":"Versioning \u00b6 The current API version is 1.0.0 . Versioning Scheme \u00b6 UCLCSSA API is versioned via semver 2.0.0 . The API version is {MAJOR}.{MINOR}.{PATCH} . When changes are made, {MAJOR} version is incremented when a breaking change is made. {MINOR} version is incremented when backwards-compatible functionality is added. {PATCH} version is incremented when backwards-compatible bug fixes are made. Versioning in Requests \u00b6 Versioning of UCLCSSA API is achieved through custom media types . In requests, only the MAJOR version should be specified, with v prepended to the MAJOR version (i.e. v1 ). Custom version information can be added to Accept header when a request is made. Media Types All UCLCSSA API media types are formatted as: application/vnd.uclcssa[.version][+return_format] With [...] specifying an optional media type information subpart. If [+return_format] is omitted, the return format defaults to JSON. If [.version] is omitted, the request by default is delegated to the latest API version, which is v1 . Specifying API Version in Requests All requests made to UCLCSSA API should include specify API version. This protects clients from breaking changes , as omitting version information causes the request to be delegated to the latest API version which may contain breaking changes. Typical Request A typical request may look like: GET /posts HTTP / 1.1 Accept : application/vnd.uclcssa.v1+json Versioning in Responses \u00b6 All responses returned from UCLCSSA API will include the Content-Type header, which will include the custom media type with version information and payload format. Hence, all endpoints will omit the Content-Type header. Info If a endpoint does not specify a Content-Type in its documentation, it shall be assumed to be exactly application/vnd.uclcssa.v1+json . Typical Responses HTTP / 1.1 200 OK Content-Type : application/vnd.uclcssa.v1+json HTTP / 1.1 400 Bad Request Content-Type : application/vnd.uclcssa.v1+json { \"error\" : \"@bad-request/missing-authorization-header\" }","title":"Versioning"},{"location":"versioning/#versioning","text":"The current API version is 1.0.0 .","title":"Versioning"},{"location":"versioning/#versioning-scheme","text":"UCLCSSA API is versioned via semver 2.0.0 . The API version is {MAJOR}.{MINOR}.{PATCH} . When changes are made, {MAJOR} version is incremented when a breaking change is made. {MINOR} version is incremented when backwards-compatible functionality is added. {PATCH} version is incremented when backwards-compatible bug fixes are made.","title":"Versioning Scheme"},{"location":"versioning/#versioning-in-requests","text":"Versioning of UCLCSSA API is achieved through custom media types . In requests, only the MAJOR version should be specified, with v prepended to the MAJOR version (i.e. v1 ). Custom version information can be added to Accept header when a request is made. Media Types All UCLCSSA API media types are formatted as: application/vnd.uclcssa[.version][+return_format] With [...] specifying an optional media type information subpart. If [+return_format] is omitted, the return format defaults to JSON. If [.version] is omitted, the request by default is delegated to the latest API version, which is v1 . Specifying API Version in Requests All requests made to UCLCSSA API should include specify API version. This protects clients from breaking changes , as omitting version information causes the request to be delegated to the latest API version which may contain breaking changes. Typical Request A typical request may look like: GET /posts HTTP / 1.1 Accept : application/vnd.uclcssa.v1+json","title":"Versioning in Requests"},{"location":"versioning/#versioning-in-responses","text":"All responses returned from UCLCSSA API will include the Content-Type header, which will include the custom media type with version information and payload format. Hence, all endpoints will omit the Content-Type header. Info If a endpoint does not specify a Content-Type in its documentation, it shall be assumed to be exactly application/vnd.uclcssa.v1+json . Typical Responses HTTP / 1.1 200 OK Content-Type : application/vnd.uclcssa.v1+json HTTP / 1.1 400 Bad Request Content-Type : application/vnd.uclcssa.v1+json { \"error\" : \"@bad-request/missing-authorization-header\" }","title":"Versioning in Responses"}]}